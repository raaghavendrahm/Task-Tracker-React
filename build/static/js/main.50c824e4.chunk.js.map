{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","components/Footer.js","components/About.js","App.js","index.js"],"names":["Button","color","text","onClick","className","style","backgroundColor","Header","title","onAddClick","showAddTaskValue","location","useLocation","pathname","Task","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","AddTask","onAdd","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","Footer","to","About","App","showAddTask","setShowAddTask","setTasks","useEffect","getTasks","a","fetchTasks","tasksFromServer","fetch","res","json","data","fetchTask","addTask","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updatedTask","path","exact","render","props","length","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50c824e4.chunk.js","sourcesContent":["const Button = ({ color, text, onClick }) => {\n  return (\n    <div>\n      <button\n        className=\"btn\"\n        style={{ backgroundColor: color }}\n        onClick={onClick}\n      >\n        {text}\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n","import Button from './Button';\nimport { useLocation } from 'react-router';\n\nconst Header = ({ title, onAddClick, showAddTaskValue }) => {\n  const location = useLocation();\n\n  return (\n    <header className=\"header\">\n      <h1>{title}</h1>\n      {location.pathname === '/' && (\n        <Button\n          color={showAddTaskValue ? 'red' : 'green'}\n          text={showAddTaskValue ? 'Close' : 'Add'}\n          onClick={onAddClick}\n        />\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import { FaTimes } from 'react-icons/fa';\n\nconst Task = ({ task, onDelete, onToggle }) => {\n  return (\n    <div\n      className={`task ${task.reminder ? 'reminder' : ''}`}\n      onDoubleClick={() => onToggle(task.id)}\n    >\n      <h3>\n        {task.text}{' '}\n        <FaTimes\n          style={{ color: 'red', cursor: 'pointer' }}\n          onClick={() => onDelete(task.id)}\n        />\n      </h3>\n      <p>{task.day}</p>\n    </div>\n  );\n};\n\nexport default Task;\n","import Task from './Task';\n\nconst Tasks = ({ tasks, onDelete, onToggle }) => {\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Task\n          key={task.id}\n          task={task}\n          onDelete={onDelete}\n          onToggle={onToggle}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Tasks;\n","import { useState } from 'react';\n\nconst AddTask = ({ onAdd }) => {\n  const [text, setText] = useState('');\n  const [day, setDay] = useState('');\n  const [reminder, setReminder] = useState(false);\n\n  // onSubmit\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!text || !day) {\n      alert('Please enter task and day');\n      return;\n    }\n\n    // onAdd\n    onAdd({ text, day, reminder }); // corresponding values are considered for text, day, and reminder (this is simplifed due to ES6. Else, it would be text: text, day: day, reminder: reminder).\n\n    // Clearing form\n    setText('');\n    setDay('');\n    setReminder(false); // false is the default value for reminder and for this state, the checkbox should not be checked. This is ensured by 'checked={reminder}' property in Set Reminder input which means the box should be checked if the value is true.\n  };\n\n  return (\n    <form className=\"add-form\" onSubmit={onSubmit}>\n      {/* onSubmit is called first to perform input validation, followed by onAdd */}\n\n      <div className=\"form-control\">\n        <label>Task</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add Task\"\n          value={text} // value of the typed text\n          onChange={(e) => setText(e.target.value)} // fires off as soon as anything is typed and value of the text will be assigned to the value typed.\n        />\n      </div>\n\n      <div className=\"form-control\">\n        <label>Day</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add Day\"\n          value={day} // value of the typed day\n          onChange={(e) => setDay(e.target.value)} // fires off as soon as anything is typed and value of the day will be assigned to the value typed.\n        />\n      </div>\n\n      <div className=\"form-control form-control-check\">\n        {/* Additional className of 'form-control-check' makes the text and checkbox align horizonatally */}\n\n        <label>Set Reminder</label>\n        <input\n          type=\"checkbox\"\n          checked={reminder} // is a short-form conditional that says if true, box to be checked\n          value={reminder} // true if checked\n          onChange={(e) => setReminder(e.currentTarget.checked)} // considers true if checked\n        />\n      </div>\n\n      <input type=\"submit\" value=\"Save Task\" className=\"btn btn-block\" />\n    </form>\n  );\n};\n\nexport default AddTask;\n","import { Link } from 'react-router-dom';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>Copyright &copy; 2021</p>\n      <Link to=\"/about\">About</Link>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { Link } from 'react-router-dom';\n\nconst About = () => {\n  return (\n    <div>\n      <h4>Version 1.0.0</h4>\n      <Link to=\"/\">Go Back</Link>\n    </div>\n  );\n};\n\nexport default About;\n","import Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport { useState } from 'react';\nimport AddTask from './components/AddTask';\nimport Footer from './components/Footer';\nimport About from './components/About';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useEffect } from 'react';\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false);\n  /* \n  - showAddTask state is used to decide whether or not to display AddTask component.\n  - Value of showAddTask is false by default and that doesn't display AddTask component.\n  - The true and false value of showAddTask is toggle by click on Add button.\n  - This will be false by default and when clicked, its value will change to true and the AddTask component will be displayed.\n  - onAddClick prop uses setShowAddTask method to toggle the current boolean value of showAddTask. This happens with click on Add button. This prop is passed from App to Header.\n  - If the state of showAddTask is true, using the conditional, the AddTask component will be displayed.\n  - showAddTaskValue prop holds the current boolean value of showAddTask. If true, the AddTask component will be displayed, text of the button will be 'Close', and its color will be red. If false, the AddTask component will not be displayed, text of the button will be 'Add', and its color will be green.\n  - All the above props are embedded in the return function.\n  \n  */\n\n  // Initial state for tasks\n  const [tasks, setTasks] = useState([]);\n\n  // // To fetch the data from db (mock seerver) as soon as the page is loaded, useEffect is used with an empty array dependency\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n    getTasks();\n  }, []);\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n\n    return data;\n\n    // fetchTasks funtion is not used directly inside useEffect as this is needed for many other requirements too. So, getTasks is called inside useEffect that calls fetchTasks.\n  };\n\n  // Fetch Task (To assist the reflection of Toggle of reminder in the server)\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Task\n\n  // To add a task not only to UI, but to the server too:\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json(); // new task added\n\n    setTasks([...tasks, data]); // new data is added to the existing tasks.\n\n    // BEFORE BACKEND\n    /* const addTask = (task) => {\n      const id = Math.floor(Math.random() * 10000) + 1;\n      const newTask = { id, ...task };\n      setTasks([...tasks, newTask]);\n\n      // addTask takes 'task' parameter which is the form input. This contains text, day, and reminer. But, id will be missing. So, a unique id is generated for each new task added. Then, the new task will be this new id and all the other properties from from input. This new task will be added to the tasks lisk using setTasks method which displays the current tasks followed by the new task added.\n\n      // This adds the tasks to UI, not to the server and with page refresh the added task would disappear.\n    }; */\n  };\n\n  // Delete Task\n\n  // To delete a task not only from UI, but server too:\n  const deleteTask = async (id) => {\n    // To delete a task from the server (not only from UI) when clicked on 'x':\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE',\n    });\n\n    // When clicked on delete icon of a task, if the id is matching with the one which is clicked, then it will be removed from the UI:\n    setTasks(tasks.filter((task) => task.id !== id));\n\n    // Display the tasks whose id is not as same as the id of the task whose 'x' is clicked. So, doesn't display the task whose 'x' is clicked.\n\n    // BEFORE BACKEND:\n    /* const deleteTask = (id) => {\n      // When clicked on delete icon of a task, if the id is matching with the one which is clicked, then it will be removed from the UI:\n      setTasks(tasks.filter((task) => task.id !== id));\n\n      // This deletes the tasks from UI, not from the server and with page refresh the deleted task would re-appear.\n    }; */\n  };\n\n  // Toggle Reminder\n\n  // To toggle reminder of a task not only from UI, but server too:\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updatedTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(updatedTask),\n    });\n\n    const data = await res.json();\n    // When a task is double clicked, the value of its 'reminder' property is switched to the other (if it is 'true', changed to 'false' or vice-versa). And if true, then a green left border is added, otherwise removed:\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n\n    // BEFORE BACKEND\n    /*  const toggleReminder = (id) => {\n      setTasks(\n        tasks.map((task) =>\n          task.id === id ? { ...task, reminder: !task.reminder } : task\n        )\n      );\n\n      // Toggle the boolean value of reminder of the task which is double clicked. A green left border is added to it which is styled in Task component by adding 'reminder' class.\n\n      // This toggles reminder only in UI, not on the server. So, with page refresh, it displays the reminder state with which the task was added. That is, if a task is added with reminder 'true', then toggled to 'false' with double click, followed by a page refresh diplays the state as 'true' (with green left border), not as 'false' even though it was toggled. This is corrected by the updated toggleReminder function above.\n    }; */\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header\n            title=\"Task Tracker\"\n            onAddClick={() => setShowAddTask(!showAddTask)}\n            showAddTaskValue={showAddTask}\n          />\n          <Route\n            path=\"/\"\n            exact\n            render={(props) => (\n              <>\n                {showAddTask && <AddTask onAdd={addTask} />}\n                {tasks.length > 0 ? (\n                  <Tasks\n                    tasks={tasks}\n                    onDelete={deleteTask}\n                    onToggle={toggleReminder}\n                  />\n                ) : (\n                  'No Tasks To Show'\n                )}\n              </>\n            )}\n          />\n\n          <Route path=\"/about\" component={About} />\n          <Footer />\n        </div>\n      </div>\n    </Router>\n\n    // This completes the UI. If this is enough, \"npm run build\" can be run to get the production build and deploy. If a backend is to be connect to get the data, \"json-server\" is used to mock backend and access data from it with db.json file instead of having data in App component.\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}